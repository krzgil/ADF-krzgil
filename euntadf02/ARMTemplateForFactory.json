{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "euntadf02"
		},
		"conn_adfframework_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'conn_adfframework'"
		},
		"conn_blob2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'conn_blob2'"
		},
		"conn_sql_framework_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'conn_sql_framework'"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().par_key_vault_service}"
		},
		"conn_adfstore01_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'conn_adfstore01'"
		},
		"conn_blob2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://test3hierarchical.dfs.core.windows.net"
		},
		"conn_snowflake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'conn_snowflake'"
		},
		"conn_snowflake2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'conn_snowflake2'"
		},
		"conn_snowflake3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'conn_snowflake3'"
		},
		"daily_load_trigger_properties_pl_eh_init_job_run_parameters_par_restart_job": {
			"type": "int",
			"defaultValue": 0
		},
		"eundadf01-kv-pep_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/f6f3a04c-f834-4a41-99a6-5a373ca539ae/resourceGroups/iduk-sandbox-rg/providers/Microsoft.KeyVault/vaults/eund-kv"
		},
		"eundadf01-kv-pep_properties_groupId": {
			"type": "string",
			"defaultValue": "vault"
		},
		"eundadf01-mssql-pep_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/f6f3a04c-f834-4a41-99a6-5a373ca539ae/resourceGroups/iduk-sandbox-rg/providers/Microsoft.Sql/servers/eundadf01"
		},
		"eundadf01-mssql-pep_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/KeyVaultTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.dummy"
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arch_pl_eh_send_events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check event count in loop",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(pipeline().parameters.job_run_id)\n,') as event_count')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Check if events exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check event count in loop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "read event json",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@string(json(activity('read event json').output.firstRow.event_params))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "read event json",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "test - Set run id",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(pipeline().parameters.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "delete row from new_event",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Web1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "delete_new_event",
										"storedProcedureParameters": {
											"new_event_id": {
												"value": {
													"value": "@string(activity('read event json').output.firstRow.new_event_id)",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "test read json",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "read event json",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test2",
										"value": {
											"value": "@string(json(activity('read event json').output.firstRow.event_params))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "test - Set run id",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test3",
										"value": {
											"value": "@string(pipeline().parameters.job_run_id)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"job_run_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					},
					"test1": {
						"type": "String"
					},
					"test2": {
						"type": "String"
					},
					"test3": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archive_pl_eh_init_job_run')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start the job",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@if(equals(pipeline().parameters.par_restart_job, 0)\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 0, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 1, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set var_event_count",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_event_count",
							"value": "1"
						}
					},
					{
						"name": "run_all_events",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set var_event_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('var_event_count')),0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(activity('Start the job').output.firstRow.job_run_id)\n,') as event_count')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set event count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Web1",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
													"connectVia": {
														"referenceName": "AutoResolveIntegrationRuntime",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "read event json",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "test - Set run id",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(activity('Start the job').output.firstRow.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "dst_sql_framework",
														"type": "DatasetReference",
														"parameters": {
															"par_secret_name": {
																"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
																"type": "Expression"
															},
															"par_sel_server_name": {
																"value": "@pipeline().globalParameters.gpar_sql_server_name",
																"type": "Expression"
															},
															"par_framework_db_name": {
																"value": "@pipeline().globalParameters.gpar_framework_db_name",
																"type": "Expression"
															},
															"par_key_vault_service": {
																"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "delete row from new_event",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Web1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "delete_new_event",
													"storedProcedureParameters": {
														"new_event_id": {
															"value": {
																"value": "@string(activity('read event json').output.firstRow.new_event_id)",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "conn_adfframework",
													"type": "LinkedServiceReference",
													"parameters": {
														"par_secret_name": {
															"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
															"type": "Expression"
														},
														"par_sql_server_name": {
															"value": "@pipeline().globalParameters.gpar_sql_server_name",
															"type": "Expression"
														},
														"par_framework_db_name": {
															"value": "@pipeline().globalParameters.gpar_framework_db_name",
															"type": "Expression"
														},
														"KeyVaultService": {
															"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "test read json",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "test2",
													"value": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "test - Set run id",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "test3",
													"value": {
														"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "ReSet event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "0",
											"type": "Expression"
										}
									}
								},
								{
									"name": "test greater",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test1",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "test  -job_run_id 2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test3",
										"value": {
											"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					},
					{
						"name": "test - job_run_id 1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "job_run_id",
							"value": {
								"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_restart_job": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					},
					"test1": {
						"type": "String"
					},
					"test2": {
						"type": "String"
					},
					"test3": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:35:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.dummy",
							"storedProcedureParameters": {
								"job_run_id": {
									"value": null,
									"type": "Int32"
								},
								"truncate_ind": {
									"value": "0",
									"type": "Byte"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-19T07:56:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "send event",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
							"method": "POST",
							"headers": {},
							"body": {
								"test": "123s"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T15:07:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_read_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dummy2",
							"storedProcedureParameters": {
								"json": {
									"value": {
										"value": "@string(pipeline().parameters.par_json)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_json": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T15:34:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_send_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@pipeline().parameters.par_event_to_be_sent",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_event_to_be_sent": {
						"type": "string",
						"defaultValue": {
							"event": "message"
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T17:16:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_send_event_from_queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "read event json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@string(json(activity('read event json').output.firstRow.event))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "read event json",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @event nvarchar(max);SET @event = dbo.get_event('\n,string(pipeline().parameters.event_id)\n,'); SELECT @event as event')\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"event_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"par_event_to_be_sent": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T17:16:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_store_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "save parameter into framework table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.dummy2",
							"storedProcedureParameters": {
								"json": {
									"value": {
										"value": "@string(pipeline().parameters.par_json)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_json": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T15:34:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_trigger_receive_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-30.uksouth.logic.azure.com:443/workflows/b299884534824bada37e8d8b0f3c03ed/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=AxJ7G653WgdfC677qKnFWAy9ApaK5qqMOgWXsvocrwk",
							"method": "POST",
							"headers": {},
							"body": {
								"test": "5678"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T09:11:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyAFile",
						"description": "Copy a file from the source store to the destination store.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								},
								"recursive": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "ds_stage_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_archive_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteAFile",
						"description": "Delete a file from the source store",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyAFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_stage_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteAFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_upd_file_load_archive_file]",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('DeleteAFile').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-15T17:14:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stage_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_archive_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_archive_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyAFile",
						"description": "Copy a file from the source store to the destination store.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								},
								"recursive": false
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_archive_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteAFile",
						"description": "Delete a file from the source store",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyAFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "update archive file",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteAFile",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "CopyAFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_upd_file_load_archive_file]",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('DeleteAFile').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-17T16:34:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_bin_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_archive_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_archive_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyAFile",
						"description": "Copy a file from the source store to the destination store.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								},
								"recursive": false
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "ds_blob2_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_archive_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteAFile",
						"description": "Delete a file from the source store",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyAFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob2_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "update archive file",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteAFile",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "CopyAFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_upd_file_load_archive_file]",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('DeleteAFile').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-17T16:34:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_bin_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_archive_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_check_bin_file_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check file in source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_file_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"contentMD5",
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "check file in source",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_check_bin_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('check file in source').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "int"
					},
					"par_pipeline_run_id": {
						"type": "int"
					},
					"par_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T10:43:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_check_bin_file_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check file in source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob2_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_file_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"contentMD5",
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "check file in source",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_check_bin_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('check file in source').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "int"
					},
					"par_pipeline_run_id": {
						"type": "int"
					},
					"par_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T12:16:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_check_file_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check file in source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob1_csv_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_file_name",
										"type": "Expression"
									},
									"par_delimiter": {
										"value": "@pipeline().parameters.par_delimiter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"columnCount",
								"contentMD5",
								"structure",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "check file in source",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_check_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('check file in source').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "int"
					},
					"par_pipeline_run_id": {
						"type": "int"
					},
					"par_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T07:03:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_csv_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_check_file_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "check file in source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob2_csv_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_file_name",
										"type": "Expression"
									},
									"par_delimiter": {
										"value": "@pipeline().parameters.par_delimiter",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"columnCount",
								"contentMD5",
								"structure",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "check file in source",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_check_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('check file in source').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "int"
					},
					"par_pipeline_run_id": {
						"type": "int"
					},
					"par_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T07:03:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_csv_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_check_source_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get files from source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob1_path",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_folder_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems",
								"exists",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "get files from source",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.ups_ins_file_load_detail",
							"storedProcedureParameters": {
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('get files from source').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"parent_file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"source_cd": {
									"value": "blob1",
									"type": "String"
								},
								"source_file_path": {
									"value": {
										"value": "@string(concat(pipeline().parameters.par_container_name, '/',pipeline().parameters.par_folder_name))",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "int"
					},
					"par_pipeline_run_id": {
						"type": "int"
					},
					"par_file_load_id": {
						"type": "int"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-18T11:14:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_path')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_check_source_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get files from source",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob2_path",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_folder_name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems",
								"exists",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "get files from source",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.usp_ins_file_load_detail",
							"storedProcedureParameters": {
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('get files from source').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"parent_file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"source_cd": {
									"value": "blob2",
									"type": "String"
								},
								"source_file_path": {
									"value": {
										"value": "@string(concat(pipeline().parameters.par_container_name, '/',pipeline().parameters.par_folder_name))",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "int"
					},
					"par_pipeline_run_id": {
						"type": "int"
					},
					"par_file_load_id": {
						"type": "int"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-18T11:14:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_path')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_bin_file_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"description": "Download delimited file from blob2 to stage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T07:46:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_bin_file_blob1_to_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob2_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T07:00:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_bin_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob2_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_bin_file_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"description": "Download delimited file from blob2 to stage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob2_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob1_bin_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T07:43:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_bin_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob1_bin_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_file_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"description": "Download delimited file from blob2 to stage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob1_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_stage_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "usp_upd_file_load_download_file",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T14:01:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_stage_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_file_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"description": "Download delimited file from blob2 to stage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob2_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_stage_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_dst_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "usp_upd_file_load_download_file",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_dst_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T14:01:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_stage_file')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_zip_file_blob1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"description": "Download & unzip files into zip location",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob1_zip_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_zip_path",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T13:50:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob1_zip_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_zip_path')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_download_zip_file_blob2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Download File",
						"description": "Download & unzip files into zip location",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob2_zip_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_src_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_src_folder_name",
										"type": "Expression"
									},
									"par_file_name": {
										"value": "@pipeline().parameters.par_src_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_zip_path",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": {
										"value": "@pipeline().parameters.par_dst_container_name",
										"type": "Expression"
									},
									"par_folder_name": {
										"value": "@pipeline().parameters.par_dst_folder_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Download File",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].usp_upd_file_load_download_zip_file",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_file_load_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_job_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Download File').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@string(pipeline().parameters.par_pipeline_run_id)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_sql_framework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_dst_container_name": {
						"type": "string"
					},
					"par_dst_folder_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T14:21:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_zip_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_zip_path')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_eh_gen_run_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Save event",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @job_run_id int; EXEC dbo.usp_run_event '''\n,string(pipeline().parameters.event)\n,''', @job_run_id = @job_run_id OUTPUT; SELECT @job_run_id as job_run_id')",
									"type": "Expression"
								},
								"queryTimeout": "00:10:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "check if jub_run_id was set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Save event",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Save event').output.firstRow.job_run_id, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "run generic pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_gen_run_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"job_run_id": {
												"value": "@int(activity('Save event').output.firstRow.job_run_id)",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"event": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T15:34:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/pipelines/pl_gen_run_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_eh_init_job_run')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start the job",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "enable logic app",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@if(equals(pipeline().parameters.par_restart_job, 0)\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 0, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 1, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set var_event_count",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_event_count",
							"value": "1"
						}
					},
					{
						"name": "run_all_events",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set var_event_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('var_event_count')),0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(activity('Start the job').output.firstRow.job_run_id)\n,') as event_count')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set event count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Web1",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
													"connectVia": {
														"referenceName": "AutoResolveIntegrationRuntime",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "read event json",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(activity('Start the job').output.firstRow.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "dst_sql_framework",
														"type": "DatasetReference",
														"parameters": {
															"par_secret_name": {
																"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
																"type": "Expression"
															},
															"par_sel_server_name": {
																"value": "@pipeline().globalParameters.gpar_sql_server_name",
																"type": "Expression"
															},
															"par_framework_db_name": {
																"value": "@pipeline().globalParameters.gpar_framework_db_name",
																"type": "Expression"
															},
															"par_key_vault_service": {
																"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "delete row from new_event",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Web1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "delete_new_event",
													"storedProcedureParameters": {
														"new_event_id": {
															"value": {
																"value": "@string(activity('read event json').output.firstRow.new_event_id)",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "conn_adfframework",
													"type": "LinkedServiceReference",
													"parameters": {
														"par_secret_name": {
															"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
															"type": "Expression"
														},
														"par_sql_server_name": {
															"value": "@pipeline().globalParameters.gpar_sql_server_name",
															"type": "Expression"
														},
														"par_framework_db_name": {
															"value": "@pipeline().globalParameters.gpar_framework_db_name",
															"type": "Expression"
														},
														"KeyVaultService": {
															"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "ReSet event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "0",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					},
					{
						"name": "enable logic app",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-28.uksouth.logic.azure.com:443/workflows/1a08c105cb3549e985d238050858015b/triggers/request/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Frequest%2Frun&sv=1.0&sig=EQNWCkT0ZGF_U97O5RFlImQFt5N6Z1MCn4K3i0rV8_E",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"body": "enable"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_restart_job": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					},
					"test1": {
						"type": "String"
					},
					"test2": {
						"type": "String"
					},
					"test3": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_eh_send_events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "send all events",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@lessOrEquals(int(string(activity('Check event count in loop').output.firstRow.event_count)), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(pipeline().parameters.job_run_id)\n,') as event_count')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Send one event",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
													"connectVia": {
														"referenceName": "AutoResolveIntegrationRuntime",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "read event json",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(pipeline().parameters.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "dst_sql_framework",
														"type": "DatasetReference",
														"parameters": {
															"par_secret_name": {
																"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
																"type": "Expression"
															},
															"par_sel_server_name": {
																"value": "@pipeline().globalParameters.gpar_sql_server_name",
																"type": "Expression"
															},
															"par_framework_db_name": {
																"value": "@pipeline().globalParameters.gpar_framework_db_name",
																"type": "Expression"
															},
															"par_key_vault_service": {
																"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "delete row from new_event",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Send one event",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "delete_new_event",
													"storedProcedureParameters": {
														"new_event_id": {
															"value": {
																"value": "@string(activity('read event json').output.firstRow.new_event_id)",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "conn_adfframework",
													"type": "LinkedServiceReference",
													"parameters": {
														"par_secret_name": {
															"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
															"type": "Expression"
														},
														"par_sql_server_name": {
															"value": "@pipeline().globalParameters.gpar_sql_server_name",
															"type": "Expression"
														},
														"par_framework_db_name": {
															"value": "@pipeline().globalParameters.gpar_framework_db_name",
															"type": "Expression"
														},
														"KeyVaultService": {
															"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "test condition in until",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test4",
										"value": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count),0)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"job_run_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"test4": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_gen_run_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute the Pipeline",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@string(concat('\nDECLARE @pipeline_name varchar(200),\n        @pipeline_run_id int,\n        @params nvarchar(max);\n\nEXEC dbo.usp_exec_pipeline @job_run_id = ',\nstring(pipeline().parameters.job_run_id),\n',\n       @pipeline_name = @pipeline_name OUTPUT,\n       @pipeline_run_id = @pipeline_run_id OUTPUT,\n       @params = @params OUTPUT\n\nSELECT @pipeline_name as pipeline_name,\n       @pipeline_run_id as pipeline_run_id,\n       @params as params;'\n))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "execute pipeline",
						"description": "execute pipeline based on output from previous activity",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Execute the Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_name)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "pl_check_source_blob2",
									"activities": [
										{
											"name": "Execute pl_check_source_blob2",
											"description": "Execute pipeline pl_check_source_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_source_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_source_blob1",
									"activities": [
										{
											"name": "Execute pl_check_source_blob1",
											"description": "Execute pipeline pl_check_source_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_source_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_file_blob1",
									"activities": [
										{
											"name": "Execute pl_check_file_blob1",
											"description": "Execute pipeline pl_check_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_delimiter": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].delimiter)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_file_blob2",
									"activities": [
										{
											"name": "Execute pl_check_file_blob2",
											"description": "Execute pipeline pl_check_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_delimiter": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].delimiter)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_file_blob1",
									"activities": [
										{
											"name": "Execute pl_download_file_blob1",
											"description": "Execute pipeline pl_download_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_file_blob2",
									"activities": [
										{
											"name": "Execute pl_download_file_blob2",
											"description": "Execute pipeline pl_download_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_bin_file_blob1",
									"activities": [
										{
											"name": "Execute pl_check_bin_file_blob1",
											"description": "Execute pipeline pl_check_bin_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_bin_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)\n",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_bin_file_blob2",
									"activities": [
										{
											"name": "Execute pl_check_bin_file_blob2",
											"description": "Execute pipeline pl_check_bin_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_bin_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)\n",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_zip_file_blob1",
									"activities": [
										{
											"name": "Execute pl_download_zip_file_blob1",
											"description": "Execute pipeline pl_download_zip_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_zip_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_zip_file_blob2",
									"activities": [
										{
											"name": "Execute pl_download_zip_file_blob2",
											"description": "Execute pipeline pl_download_zip_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_zip_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_load_snowflake",
									"activities": [
										{
											"name": "Execute pl_load_snowflake",
											"description": "Execute pipeline pl_load_snowflake",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_load_snowflake",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_archive_blob1",
									"activities": [
										{
											"name": "Execute pl_archive_source",
											"description": "Execute pipeline pl_archiving",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_archive_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_archive_blob2",
									"activities": [
										{
											"name": "Execute pl_archive_source_blob2",
											"description": "Execute pipeline pl_archiving",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_archive_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "missing pipeline",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "dbo.usp_upd_pipeline_run",
										"storedProcedureParameters": {
											"job_run_id": {
												"value": {
													"value": "@pipeline().parameters.job_run_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"json_parameter": {
												"value": {
													"value": "@string(activity('Execute the Pipeline').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "send all events",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "execute pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_eh_send_events",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_run_id": {
									"value": "@pipeline().parameters.job_run_id",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"job_run_id": {
						"type": "int",
						"defaultValue": 77
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-18T11:20:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/pipelines/pl_eh_send_events')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]",
				"[concat(variables('factoryId'), '/pipelines/pl_check_source_blob2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_check_source_blob1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_check_file_blob1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_check_file_blob2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_download_file_blob1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_download_file_blob2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_check_bin_file_blob1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_check_bin_file_blob2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_download_zip_file_blob1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_download_zip_file_blob2')]",
				"[concat(variables('factoryId'), '/pipelines/pl_load_snowflake')]",
				"[concat(variables('factoryId'), '/pipelines/pl_archive_blob1')]",
				"[concat(variables('factoryId'), '/pipelines/pl_archive_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_job_run')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "run_all_events",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set var_event_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('var_event_count')),0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "SELECT dbo.fn_get_event_count() as event_count",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set event count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(variables('var_event_count')), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute generic pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pl_gen_run_pipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"job_run_id": {
															"value": "@variables('job_run_id')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "trigger procedures events",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[trigger_event]",
										"storedProcedureParameters": {
											"job_run_id": {
												"value": {
													"value": "@int(variables('job_run_id'))",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "trigger files event",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[trigger_file_event]",
										"storedProcedureParameters": {
											"job_run_id": {
												"value": {
													"value": "@int(variables('job_run_id'))",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Set var_event_count",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set job_run_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_event_count",
							"value": "1"
						}
					},
					{
						"name": "Set job_run_id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "job_run_id",
							"value": {
								"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Start the job",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@if(equals(pipeline().parameters.par_restart_job, 0)\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 0, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 1, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_restart_job": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]",
				"[concat(variables('factoryId'), '/pipelines/pl_gen_run_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.dummy"
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "set JSON",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.dummy",
							"storedProcedureParameters": {
								"file_load_id": {
									"value": {
										"value": "@pipeline().parameters.par_file_load_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"job_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_job_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"json_parameter": {
									"value": {
										"value": "@string(activity('Stored procedure1').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().parameters.par_pipeline_run_id",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "conn_adfframework",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_secret_name": {
									"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
									"type": "Expression"
								},
								"par_sql_server_name": {
									"value": "@pipeline().globalParameters.gpar_sql_server_name",
									"type": "Expression"
								},
								"par_framework_db_name": {
									"value": "@pipeline().globalParameters.gpar_framework_db_name",
									"type": "Expression"
								},
								"KeyVaultService": {
									"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_src_container_name": {
						"type": "string"
					},
					"par_src_folder_name": {
						"type": "string"
					},
					"par_src_file_name": {
						"type": "string"
					},
					"par_file_load_id": {
						"type": "string"
					},
					"par_job_run_id": {
						"type": "string"
					},
					"par_pipeline_run_id": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T11:04:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_send_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "send event",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@string(variables('var_event_json'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var_event_json": {
						"type": "String",
						"defaultValue": "{\"test\":\"123\"}"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T15:19:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_test_snowflake_proc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": "CALL PUBLIC.TEST_PROC1();",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake_proc",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-25T15:21:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake_proc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_test_unzip')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob2_zip_file",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": "container3",
									"par_folder_name": "test1",
									"par_file_name": "data1.zip"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob1_bin_path",
								"type": "DatasetReference",
								"parameters": {
									"par_container_name": "zip",
									"par_folder_name": "file_id_105"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-10-22T06:52:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob2_zip_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob1_bin_path')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_archive_bin_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_archive_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "\"Company\"|\"Discount Scheme\"|\"Discount Scheme Description\"|\"Date Created\"|\"Created By\"|\"Date Changed\"|\"Changed By\"|\"Data Extract Date\"",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1_bin_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1_bin_path')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1_csv_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					},
					"par_delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().par_delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1_path')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1_zip_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob2_bin_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_blob2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob2_bin_path')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_blob2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob2_csv_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_blob2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					},
					"par_delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().par_delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob2_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_blob2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob2_path')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_blob2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob2_zip_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_blob2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_blob2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_snowflake_proc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_snowflake_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_snowflake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_schema_name": {
						"type": "string"
					},
					"par_table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "Data_Source_Type_Key",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Market_Date",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "NAV_Date",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Fund_Class_Code",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Fund_Class_Name",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "ISIN",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Nav_Per_Share",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Nav_Per_Share_With_Div_Reinvested",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Modified_GAV",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "BMK",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "AUM_At_Class_Level",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "FILE_ID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "LineNo",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "CDC_DATE_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().par_schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().par_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_snowflake_table_par')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_snowflake2",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_account_name": "ja91996.west-europe.azure.snowflakecomputing.com",
						"par_user_name": "krzysztof_gil"
					}
				},
				"parameters": {
					"par_schema_name": {
						"type": "string"
					},
					"par_table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "Data_Source_Type_Key",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Market_Date",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "NAV_Date",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Fund_Class_Code",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Fund_Class_Name",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "ISIN",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Nav_Per_Share",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Nav_Per_Share_With_Div_Reinvested",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "Modified_GAV",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "BMK",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "AUM_At_Class_Level",
						"type": "VARCHAR",
						"precision": 244,
						"scale": 0
					},
					{
						"name": "FILE_ID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "LineNo",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "CDC_DATE_KEY",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().par_schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().par_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_snowflake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stage_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					},
					"par_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().par_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": "\u0001",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "\"Company\"|\"Discount Scheme\"|\"Discount Scheme Description\"|\"Date Created\"|\"Created By\"|\"Date Changed\"|\"Changed By\"|\"Data Extract Date\"",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_zip_path')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfstore01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"par_container_name": {
						"type": "string"
					},
					"par_folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().par_folder_name",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().par_container_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfstore01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_sql_framework')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfframework",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_secret_name": {
							"value": "@dataset().par_secret_name",
							"type": "Expression"
						},
						"par_sql_server_name": {
							"value": "@dataset().par_sel_server_name",
							"type": "Expression"
						},
						"par_framework_db_name": {
							"value": "@dataset().par_framework_db_name",
							"type": "Expression"
						},
						"KeyVaultService": {
							"value": "@dataset().par_key_vault_service",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"par_secret_name": {
						"type": "string",
						"defaultValue": "frameworkUserPassword"
					},
					"par_sel_server_name": {
						"type": "string",
						"defaultValue": "eundadf01.database.windows.net"
					},
					"par_framework_db_name": {
						"type": "string",
						"defaultValue": "eundadf01-framework"
					},
					"par_key_vault_service": {
						"type": "string",
						"defaultValue": "https://eund-kv.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "job_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "job_name",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/conn_adfframework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"par_key_vault_service": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_adfframework')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service description - connection to Azure SQL framework db",
				"parameters": {
					"par_secret_name": {
						"type": "String",
						"defaultValue": "frameworkUserPassword"
					},
					"par_sql_server_name": {
						"type": "String",
						"defaultValue": "eundadf01.database.windows.net"
					},
					"par_framework_db_name": {
						"type": "String",
						"defaultValue": "eundadf01-framework"
					},
					"KeyVaultService": {
						"type": "String",
						"defaultValue": "https://eund-kv.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('conn_adfframework_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference",
							"parameters": {
								"par_key_vault_service": {
									"value": "@linkedService().KeyVaultService",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "@linkedService().par_secret_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_adfstore01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('conn_adfstore01_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_blob2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Description made on dev",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('conn_blob2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('conn_blob2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to snowflake database",
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": "[parameters('conn_snowflake_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_snowflake2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Snowflake",
				"description": "connection to snowflake database",
				"annotations": [],
				"parameters": {
					"par_account_name": {
						"type": "string"
					},
					"par_user_name": {
						"type": "string"
					}
				},
				"typeProperties": {
					"connectionString": "[parameters('conn_snowflake2_connectionString')]",
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRGLVNBTkRCT1gtREVWMV84ZTY1NDk5OS1mZDY5LTRmZGItODk3ZS04YzU0MWI5N2E4ZDkiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_snowflake3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Snowflake",
				"description": "connection to snowflake database",
				"annotations": [],
				"parameters": {
					"par_account_name": {
						"type": "string"
					},
					"par_user_name": {
						"type": "string"
					}
				},
				"typeProperties": {
					"connectionString": "[parameters('conn_snowflake3_connectionString')]",
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQEE3QkNCQ0Y4LUE4RkUtNDlDOS1BQjNBLUZEQzIwQjBGMzRGMV81OTA3Yzg0MS0zMjQ4LTQ2MWQtODE1ZC0yMzIzNGNiM2U0MjEiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conn_sql_framework')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "desc",
				"parameters": {
					"par_secret_name": {
						"type": "String"
					},
					"par_sql_server_name": {
						"type": "String"
					},
					"par_framework_db_name": {
						"type": "String"
					},
					"KeyVaultService": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('conn_sql_framework_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_load_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_eh_init_job_run",
							"type": "PipelineReference"
						},
						"parameters": {
							"par_restart_job": "[parameters('daily_load_trigger_properties_pl_eh_init_job_run_parameters_par_restart_job')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2021-12-22T09:58:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_eh_init_job_run')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/self-hosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/eundadf01-kv-pep')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('eundadf01-kv-pep_properties_privateLinkResourceId')]",
				"groupId": "[parameters('eundadf01-kv-pep_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/eundadf01-mssql-pep')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('eundadf01-mssql-pep_properties_privateLinkResourceId')]",
				"groupId": "[parameters('eundadf01-mssql-pep_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}