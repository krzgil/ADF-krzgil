{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "euntadf02"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dst_sql_framework')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "conn_adfframework",
					"type": "LinkedServiceReference",
					"parameters": {
						"par_secret_name": {
							"value": "@dataset().par_secret_name",
							"type": "Expression"
						},
						"par_sql_server_name": {
							"value": "@dataset().par_sel_server_name",
							"type": "Expression"
						},
						"par_framework_db_name": {
							"value": "@dataset().par_framework_db_name",
							"type": "Expression"
						},
						"KeyVaultService": {
							"value": "@dataset().par_key_vault_service",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"par_secret_name": {
						"type": "string",
						"defaultValue": "frameworkUserPassword"
					},
					"par_sel_server_name": {
						"type": "string",
						"defaultValue": "eundadf01.database.windows.net"
					},
					"par_framework_db_name": {
						"type": "string",
						"defaultValue": "eundadf01-framework"
					},
					"par_key_vault_service": {
						"type": "string",
						"defaultValue": "https://eund-kv.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "job_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "job_name",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_send_event_from_queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "read event json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@string(json(activity('read event json').output.firstRow.event))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "read event json",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @event nvarchar(max);SET @event = dbo.get_event('\n,string(pipeline().parameters.event_id)\n,'); SELECT @event as event')\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"event_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"par_event_to_be_sent": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-22T17:16:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_gen_run_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute the Pipeline",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@string(concat('\nDECLARE @pipeline_name varchar(200),\n        @pipeline_run_id int,\n        @params nvarchar(max);\n\nEXEC dbo.usp_exec_pipeline @job_run_id = ',\nstring(pipeline().parameters.job_run_id),\n',\n       @pipeline_name = @pipeline_name OUTPUT,\n       @pipeline_run_id = @pipeline_run_id OUTPUT,\n       @params = @params OUTPUT\n\nSELECT @pipeline_name as pipeline_name,\n       @pipeline_run_id as pipeline_run_id,\n       @params as params;'\n))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "execute pipeline",
						"description": "execute pipeline based on output from previous activity",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Execute the Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_name)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "pl_check_source_blob2",
									"activities": [
										{
											"name": "Execute pl_check_source_blob2",
											"description": "Execute pipeline pl_check_source_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_source_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_source_blob1",
									"activities": [
										{
											"name": "Execute pl_check_source_blob1",
											"description": "Execute pipeline pl_check_source_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_source_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_file_blob1",
									"activities": [
										{
											"name": "Execute pl_check_file_blob1",
											"description": "Execute pipeline pl_check_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_delimiter": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].delimiter)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_file_blob2",
									"activities": [
										{
											"name": "Execute pl_check_file_blob2",
											"description": "Execute pipeline pl_check_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_delimiter": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].delimiter)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_file_blob1",
									"activities": [
										{
											"name": "Execute pl_download_file_blob1",
											"description": "Execute pipeline pl_download_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_file_blob2",
									"activities": [
										{
											"name": "Execute pl_download_file_blob2",
											"description": "Execute pipeline pl_download_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_bin_file_blob1",
									"activities": [
										{
											"name": "Execute pl_check_bin_file_blob1",
											"description": "Execute pipeline pl_check_bin_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_bin_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)\n",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_check_bin_file_blob2",
									"activities": [
										{
											"name": "Execute pl_check_bin_file_blob2",
											"description": "Execute pipeline pl_check_bin_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_check_bin_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)\n",
														"type": "Expression"
													},
													"par_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													},
													"par_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_zip_file_blob1",
									"activities": [
										{
											"name": "Execute pl_download_zip_file_blob1",
											"description": "Execute pipeline pl_download_zip_file_blob1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_zip_file_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_download_zip_file_blob2",
									"activities": [
										{
											"name": "Execute pl_download_zip_file_blob2",
											"description": "Execute pipeline pl_download_zip_file_blob2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_download_zip_file_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_load_snowflake",
									"activities": [
										{
											"name": "Execute pl_load_snowflake",
											"description": "Execute pipeline pl_load_snowflake",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_load_snowflake",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_archive_blob1",
									"activities": [
										{
											"name": "Execute pl_archive_source",
											"description": "Execute pipeline pl_archiving",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_archive_blob1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pl_archive_blob2",
									"activities": [
										{
											"name": "Execute pl_archive_source_blob2",
											"description": "Execute pipeline pl_archiving",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pl_archive_blob2",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"par_src_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_container_name)",
														"type": "Expression"
													},
													"par_src_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_folder_name)",
														"type": "Expression"
													},
													"par_src_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].src_file_name)",
														"type": "Expression"
													},
													"par_dst_container_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_container_name)",
														"type": "Expression"
													},
													"par_dst_folder_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_folder_name)",
														"type": "Expression"
													},
													"par_dst_file_name": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].dst_file_name)",
														"type": "Expression"
													},
													"par_file_load_id": {
														"value": "@string(json(activity('Execute the Pipeline').output.firstRow.params)[0].file_load_id)",
														"type": "Expression"
													},
													"par_job_run_id": {
														"value": "@string(pipeline().parameters.job_run_id)",
														"type": "Expression"
													},
													"par_pipeline_run_id": {
														"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "missing pipeline",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "dbo.usp_upd_pipeline_run",
										"storedProcedureParameters": {
											"job_run_id": {
												"value": {
													"value": "@pipeline().parameters.job_run_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"json_parameter": {
												"value": {
													"value": "@string(activity('Execute the Pipeline').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@string(activity('Execute the Pipeline').output.firstRow.pipeline_run_id)",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"job_run_id": {
						"type": "int",
						"defaultValue": 77
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-18T11:20:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_eh_init_job_run')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start the job",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@if(equals(pipeline().parameters.par_restart_job, 0)\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 0, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 1, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set var_event_count",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_event_count",
							"value": "1"
						}
					},
					{
						"name": "run_all_events",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set var_event_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('var_event_count')),0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(activity('Start the job').output.firstRow.job_run_id)\n,') as event_count')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set event count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Web1",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
													"connectVia": {
														"referenceName": "AutoResolveIntegrationRuntime",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "read event json",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "test - Set run id",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(activity('Start the job').output.firstRow.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "dst_sql_framework",
														"type": "DatasetReference",
														"parameters": {
															"par_secret_name": {
																"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
																"type": "Expression"
															},
															"par_sel_server_name": {
																"value": "@pipeline().globalParameters.gpar_sql_server_name",
																"type": "Expression"
															},
															"par_framework_db_name": {
																"value": "@pipeline().globalParameters.gpar_framework_db_name",
																"type": "Expression"
															},
															"par_key_vault_service": {
																"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "delete row from new_event",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Web1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "delete_new_event",
													"storedProcedureParameters": {
														"new_event_id": {
															"value": {
																"value": "@string(activity('read event json').output.firstRow.new_event_id)",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "conn_adfframework",
													"type": "LinkedServiceReference",
													"parameters": {
														"par_secret_name": {
															"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
															"type": "Expression"
														},
														"par_sql_server_name": {
															"value": "@pipeline().globalParameters.gpar_sql_server_name",
															"type": "Expression"
														},
														"par_framework_db_name": {
															"value": "@pipeline().globalParameters.gpar_framework_db_name",
															"type": "Expression"
														},
														"KeyVaultService": {
															"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "test read json",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "test2",
													"value": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "test - Set run id",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "test3",
													"value": {
														"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "ReSet event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "0",
											"type": "Expression"
										}
									}
								},
								{
									"name": "test greater",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test1",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "test  -job_run_id 2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test3",
										"value": {
											"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					},
					{
						"name": "test - job_run_id 1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "job_run_id",
							"value": {
								"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_restart_job": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					},
					"test1": {
						"type": "String"
					},
					"test2": {
						"type": "String"
					},
					"test3": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arch_pl_eh_send_events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check event count in loop",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(pipeline().parameters.job_run_id)\n,') as event_count')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Check if events exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check event count in loop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "read event json",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@string(json(activity('read event json').output.firstRow.event_params))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "read event json",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "test - Set run id",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(pipeline().parameters.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "delete row from new_event",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Web1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "delete_new_event",
										"storedProcedureParameters": {
											"new_event_id": {
												"value": {
													"value": "@string(activity('read event json').output.firstRow.new_event_id)",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "test read json",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "read event json",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test2",
										"value": {
											"value": "@string(json(activity('read event json').output.firstRow.event_params))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "test - Set run id",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test3",
										"value": {
											"value": "@string(pipeline().parameters.job_run_id)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"job_run_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					},
					"test1": {
						"type": "String"
					},
					"test2": {
						"type": "String"
					},
					"test3": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_eh_send_events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "send all events",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@lessOrEquals(int(string(activity('Check event count in loop').output.firstRow.event_count)), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT dbo.fn_get_new_event_count( '\n,string(pipeline().parameters.job_run_id)\n,') as event_count')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Send one event",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "read event json",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-03.uksouth.logic.azure.com:443/workflows/7ecd81733c584ca4b5a6a0f630963012/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=rpaNYf0dvVQATVVbaGxv9UDOERESm5khbqeToghEKf4",
													"connectVia": {
														"referenceName": "AutoResolveIntegrationRuntime",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "@string(json(activity('read event json').output.firstRow.event_params))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "read event json",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('DECLARE @event_params nvarchar(max);DECLARE @new_event_id int;EXEC dbo.get_new_event @job_run_id = '\n, string(pipeline().parameters.job_run_id)\n,', @event_params = @event_params OUTPUT, @new_event_id = @new_event_id OUTPUT;SELECT @event_params as event_params, @new_event_id as new_event_id')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "dst_sql_framework",
														"type": "DatasetReference",
														"parameters": {
															"par_secret_name": {
																"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
																"type": "Expression"
															},
															"par_sel_server_name": {
																"value": "@pipeline().globalParameters.gpar_sql_server_name",
																"type": "Expression"
															},
															"par_framework_db_name": {
																"value": "@pipeline().globalParameters.gpar_framework_db_name",
																"type": "Expression"
															},
															"par_key_vault_service": {
																"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "delete row from new_event",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Send one event",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "delete_new_event",
													"storedProcedureParameters": {
														"new_event_id": {
															"value": {
																"value": "@string(activity('read event json').output.firstRow.new_event_id)",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "conn_adfframework",
													"type": "LinkedServiceReference",
													"parameters": {
														"par_secret_name": {
															"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
															"type": "Expression"
														},
														"par_sql_server_name": {
															"value": "@pipeline().globalParameters.gpar_sql_server_name",
															"type": "Expression"
														},
														"par_framework_db_name": {
															"value": "@pipeline().globalParameters.gpar_framework_db_name",
															"type": "Expression"
														},
														"KeyVaultService": {
															"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "test condition in until",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "test4",
										"value": {
											"value": "@greater(int(activity('Check event count in loop').output.firstRow.event_count),0)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"job_run_id": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"test4": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_job_run')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "run_all_events",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set var_event_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('var_event_count')),0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check event count in loop",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "SELECT dbo.fn_get_event_count() as event_count",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_framework",
											"type": "DatasetReference",
											"parameters": {
												"par_secret_name": {
													"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
													"type": "Expression"
												},
												"par_sel_server_name": {
													"value": "@pipeline().globalParameters.gpar_sql_server_name",
													"type": "Expression"
												},
												"par_framework_db_name": {
													"value": "@pipeline().globalParameters.gpar_framework_db_name",
													"type": "Expression"
												},
												"par_key_vault_service": {
													"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set event count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check event count in loop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "var_event_count",
										"value": {
											"value": "@string(activity('Check event count in loop').output.firstRow.event_count)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check if events exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set event count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(int(variables('var_event_count')), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute generic pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pl_gen_run_pipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"job_run_id": {
															"value": "@variables('job_run_id')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "trigger procedures events",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[trigger_event]",
										"storedProcedureParameters": {
											"job_run_id": {
												"value": {
													"value": "@int(variables('job_run_id'))",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "trigger files event",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Check if events exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[trigger_file_event]",
										"storedProcedureParameters": {
											"job_run_id": {
												"value": {
													"value": "@int(variables('job_run_id'))",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "conn_adfframework",
										"type": "LinkedServiceReference",
										"parameters": {
											"par_secret_name": {
												"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
												"type": "Expression"
											},
											"par_sql_server_name": {
												"value": "@pipeline().globalParameters.gpar_sql_server_name",
												"type": "Expression"
											},
											"par_framework_db_name": {
												"value": "@pipeline().globalParameters.gpar_framework_db_name",
												"type": "Expression"
											},
											"KeyVaultService": {
												"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
												"type": "Expression"
											}
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Set var_event_count",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set job_run_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_event_count",
							"value": "1"
						}
					},
					{
						"name": "Set job_run_id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Start the job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "job_run_id",
							"value": {
								"value": "@string(activity('Start the job').output.firstRow.job_run_id)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Start the job",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@if(equals(pipeline().parameters.par_restart_job, 0)\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 0, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n, 'DECLARE @job_run_id int;\nEXEC dbo.init_daily_load @job_restart_ind = 1, @job_run_id = @job_run_id OUTPUT;\nSELECT @job_run_id as job_run_id'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_framework",
								"type": "DatasetReference",
								"parameters": {
									"par_secret_name": {
										"value": "@pipeline().globalParameters.gpar_kv_sql_server_password",
										"type": "Expression"
									},
									"par_sel_server_name": {
										"value": "@pipeline().globalParameters.gpar_sql_server_name",
										"type": "Expression"
									},
									"par_framework_db_name": {
										"value": "@pipeline().globalParameters.gpar_framework_db_name",
										"type": "Expression"
									},
									"par_key_vault_service": {
										"value": "@pipeline().globalParameters.gpar_key_vault_service_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"par_restart_job": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"var_event_count": {
						"type": "String",
						"defaultValue": "1"
					},
					"job_run_id": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-23T16:21:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_framework')]",
				"[concat(variables('factoryId'), '/pipelines/pl_gen_run_pipeline')]"
			]
		}
	]
}